import 'package:flutter/material.dart';
//import 'dart:convert';
import 'package:longdo_maps_api3_flutter/longdo_maps_api3_flutter.dart';
import 'package:geolocator/geolocator.dart';

//import 'dart:async';


/*//case3 พิมพ์latitudeและlongitudeแล้วแสดงในmap
class MapsPage extends StatefulWidget {
  final String? latitude;
  final String? longitude;

  const MapsPage({Key? key, this.latitude, this.longitude}) : super(key: key);

  @override
  State<MapsPage> createState() => _MapsPageState();
}

class _MapsPageState extends State<MapsPage> {
  final map = GlobalKey<LongdoMapState>();
  final GlobalKey<ScaffoldMessengerState> messenger =
      GlobalKey<ScaffoldMessengerState>();

  String? latitude;
  String? longitude;

  @override
  Widget build(BuildContext context) {
  return Scaffold(
    appBar: AppBar(
      title: const Text('Map'),
    ),
    body: Column(
      children: [
        Expanded(
          flex: 2,
          child: LongdoMapWidget(
            apiKey: "330c3103963b7f4bd6aea126b985c041",
            key: map,
            eventName: [
              JavascriptChannel(
                      name: "ready",
                      onMessageReceived: (message) {
                        // Check if latitude and longitude are available, then add marker
                      if (widget.latitude != null && widget.longitude != null) {
                        print("Location"); //เช็ค
                        addMarker(double.parse(widget.latitude!), double.parse(widget.longitude!));
                      }
                      },
                    ),
              /*JavascriptChannel(
                  name: "click",
                  onMessageReceived: (message) {
                    var jsonObj = json.decode(message.message);
                    setState(() {
                      latitude = jsonObj['data']['lat'].toString();
                      longitude = jsonObj['data']['lon'].toString();
                    });
                    print(
                        'Latitude: $latitude, Longitude: $longitude'); //บอกตำแหน่งที่กด
                    addMarker(
                        double.parse(latitude!), double.parse(longitude!));
                  },
                ),*/
                /*JavascriptChannel(
                  name: "overlayClick",
                  onMessageReceived: (message) {
                    var jsonObj = json.decode(message.message);
                    map.currentState
                        ?.call("Overlays.remove", args: [jsonObj["data"]]);
                  },
                ),*/
            ],
          ),
        ),
        
        // Show latitude and longitude
        if (widget.latitude != null && widget.longitude != null)
          Text('Latitude: ${widget.latitude}, Longitude: ${widget.longitude}'),
        ElevatedButton(
          onPressed: () {
            Navigator.pop(context, {'latitude': widget.latitude, 'longitude': widget.longitude});
          },
          child: const Text('Back to Home'),
        ),
      ],
    ),
  );
}
  //function addMarker
  void addMarker(double lat, double lon) {
    var marker = Longdo.LongdoObject(
      "Marker",
      args: [
        {
          "lon": lon,
          "lat": lat,
        },
        {"draggable": true}
      ],
    );
    map.currentState?.call("Overlays.add", args: [marker]);
    print('Marker added at Latitude: $lat, Longitude: $lon'); // ใส่ print ที่นี่เพื่อตรวจสอบการทำงานของ addMarker()
  }
}*/

//พิมพ์latitudeและlongitudeแล้วแสดงในmapพร้อมตำแหน่งล่าสุด(ฉบับล่าสุด)
class MapsPage extends StatefulWidget {
  final String? latitude;
  final String? longitude;

  const MapsPage({Key? key, this.latitude, this.longitude}) : super(key: key);

  @override
  State<MapsPage> createState() => _MapsPageState();
}

class _MapsPageState extends State<MapsPage>{
  final map = GlobalKey<LongdoMapState>();
  final GlobalKey<ScaffoldMessengerState> messenger =
      GlobalKey<ScaffoldMessengerState>();

  String? latitude;
  String? longitude;

  
  //function Marker(ตอนนี้ไม่ได้ใช้)
  void addMarker(double lat, double lon,) {
    var marker = Longdo.LongdoObject(
      "Marker",
      args: [
        {
          "lon": lon,
          "lat": lat,
        },

        {
          "title": "Destination",
          "detail": "Patient",
        }
        //{"draggable": true} //ตั้งเพื่อลากหมุดได้
      ],
    );
    map.currentState?.call("Overlays.add", args: [marker]);
    //map.currentState?.call("Overlays.drop", args: [marker]); //Drop pin 
    map.currentState?.call("Overlays.bounce", args: [marker]); // Show bounce animation
    print(
        'Marker added at Latitude: $lat, Longitude: $lon'); // ใส่ print ที่นี่เพื่อตรวจสอบการทำงานของ addMarker()
  }

  void currentMarker(double lat, double lon) {
    var marker2 = Longdo.LongdoObject(
      "Dot",
      args: [
        {
          "lon": lon,
          "lat": lat,
        },
        {
          "title": "Start",
          "detail": "Me",
          "lineWidth": 10, //ความหนาจุด
          "lineColor": "rgba(0, 0, 255, 0.8)", //Red Green Blue โปร่งแสง
          //"draggable": true,

          /*//โชว์คำพูด marker บนmap
          "icon":{
            "html": "<b>Marker</b>", 
            /*"offset": {
                        "x": 18,
                        "y": 21,
                      }*/
          },*/
        }
        //{ 'title': 'Marker', 'detail': 'Marker', 'icon': { 'url': 'assets/image/Map_Marker.png', 'offset': { 'x': 16, 'y': 16 }} }
      ],
    );
    map.currentState?.call("Overlays.add", args: [marker2]);
    print(
        'Marker added at Latitude: $lat, Longitude: $lon'); // ใส่ print ที่นี่เพื่อตรวจสอบการทำงานของ currentMarker()
  }

  //function navigation 
  void navigation(double latstart, double lonstart, double latend, double lonend){
    /*var start = Longdo.LongdoObject(
      "Marker",
      args: [
        {
          "lon": lonstart,
          "lat": latstart,
        },
        {
          "title": "Start",
          "detail": "Me",
          //"lineWidth": 10, //ความหนาจุด
          //"lineColor": "rgba(0, 0, 255, 0.8)", //Red Green Blue โปร่งแสง
          //"draggable": true,

          /*//โชว์คำพูด marker บนmap
          "icon":{
            "html": "<b>Marker</b>", 
            /*"offset": {
                        "x": 18,
                        "y": 21,
                      }*/
          },*/
        }
        //{ 'title': 'Marker', 'detail': 'Marker', 'icon': { 'url': 'assets/image/Map_Marker.png', 'offset': { 'x': 16, 'y': 16 }} }
      ],
    );
    map.currentState?.call("Overlays.add", args: [start]);*/

    var start = {
                  "lon": lonstart,
                  "lat": latstart,
                };

    var end = Longdo.LongdoObject(
      "Marker",
      args: [
        {
          "lon": lonend,
          "lat": latend,
        },

        {
          "title": "Destination",
          "detail": "Patient",
        }
        //{"draggable": true} //ตั้งเพื่อลากหมุดได้
      ],
    );
    map.currentState?.call("Overlays.add", args: [end]);
    //map.currentState?.call("Overlays.drop", args: [end]); //Drop pin 
    map.currentState?.call("Overlays.bounce", args: [end]); // Show bounce animation

    //Set Navigation
    //map.currentState?.call("Route.clear", args: []);
    map.currentState?.call("Route.add", args: [start]);
    map.currentState?.call("Route.add", args: [end]);
    map.currentState?.call("Route.search", args: []);
  }
  
  //Function get location
  getLocation() async {
    //Current location
    LocationPermission permission = await Geolocator.checkPermission();
    if (permission == LocationPermission.denied ||
        permission == LocationPermission.deniedForever) {
      print("Location Denied");
      //LocationPermission ask = await Geolocator.requestPermission();
    } else {
      Position currentposition = await Geolocator.getCurrentPosition(
          desiredAccuracy: LocationAccuracy.best);
      print("Latitude=${currentposition.latitude.toString()}");
      print("Longitude=${currentposition.longitude.toString()}");
      
      //currentMarker(double.parse(currentposition.latitude.toString()),double.parse(currentposition.longitude.toString()));
      
      //Call Navigation 
        navigation(double.parse(currentposition.latitude.toString()),
          double.parse(currentposition.longitude.toString()), double.parse(widget.latitude!), double.parse(widget.longitude!));
      
      /*map.currentState?.call("Ui.Geolocation.visible", args: [true]); //Show Current location symbol
      map.currentState?.call("location", args: ["Geolocation"]);*/
      //map.currentState?.call("location", args: ["LatLng(${currentposition.latitude.toString()}, ${currentposition.longitude.toString()})"]); 
    }
  }

  /*//Custom Marker
  ImageProvider markerImage = AssetImage('assets/image/Map_Marker.png');*/

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(
        title: const Text('Map'),
      ),
      body: Column(
        children: [
          Expanded(
            flex: 2,
            child: LongdoMapWidget(
              apiKey: "330c3103963b7f4bd6aea126b985c041",
              key: map,
              eventName: [
                JavascriptChannel(
                  name: "ready",
                  onMessageReceived: (message) {
                    /*// Check if latitude and longitude are available, then add marker for destination
                    if (widget.latitude != null && widget.longitude != null) {
                      addMarker(double.parse(widget.latitude!),
                          double.parse(widget.longitude!));
                    }*/

                    //get location
                    getLocation();
                  },
                ),
              ],
            ),
          ),

          // Show latitude and longitude on app
          if (widget.latitude != null && widget.longitude != null)
            Text(
                'Latitude: ${widget.latitude}, Longitude: ${widget.longitude}'),
          // Button to get current location
          /*ElevatedButton(
            //onPressed: getCurrentLocation,
            onPressed: test,
            child: const Text('Get Current Location'),
          ),*/

          ElevatedButton(
            onPressed: () {
              Navigator.pop(context,
                  {'latitude': widget.latitude, 'longitude': widget.longitude});
            },
            child: const Text('Back to Home'),
          ),
          
        ],
      ),
    );
  }
}