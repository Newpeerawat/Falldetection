import 'package:flutter/material.dart';
import 'package:flutter_application_3/home.dart';
import 'package:flutter_application_3/create_account.dart';
import 'package:flutter_application_3/user_service.dart';
import 'package:flutter_application_3/account.dart';
import 'package:flutter_application_3/forgot_password.dart';
import 'package:flutter_application_3/map.dart';

import 'package:shared_preferences/shared_preferences.dart';
import 'package:flutter_local_notifications/flutter_local_notifications.dart';

//มีnotification
final FlutterLocalNotificationsPlugin flutterLocalNotificationsPlugin =
    FlutterLocalNotificationsPlugin();

Future<void> _showNotification2() async {
  AndroidNotificationDetails androidNotificationDetails =
      AndroidNotificationDetails('nextflow_noti_001', 'Urgent Alert',
          playSound: true,
          sound: RawResourceAndroidNotificationSound(
              'notification.mp3'.split('.').first),
          importance: Importance.max,
          priority: Priority.high,
          ticker: 'ticker');

  NotificationDetails platformChannelDetails = NotificationDetails(
    android: androidNotificationDetails,
  );

  await flutterLocalNotificationsPlugin.show(0, 'Emergency!',
      'Open the app to view the location.', platformChannelDetails);
}

//เมื่อปิดแอพมีการจำค่าuserกับpassword
class LoginPage extends StatefulWidget {
  const LoginPage({super.key, required this.title});

  final String title;

  @override
  State<LoginPage> createState() => _LoginState();
}

class _LoginState extends State<LoginPage> {
  final _formKey = GlobalKey<FormState>();
  final TextEditingController _userController = TextEditingController();
  final TextEditingController _passwordController = TextEditingController();
  final UserService _userService = UserService(); // Instance of UserService
  bool _obscurePassword = true; // ตัวแปรเพื่อควบคุมการแสดง/ซ่อนรหัสผ่าน
  bool _rememberMe = false; // ตัวแปรควบคุมสถานะ "Remember Me"

  @override
  void initState() {
    super.initState();
    _checkNavigation();
    _loadRememberedData(); // โหลดข้อมูลที่บันทึกไว้เมื่อเปิดแอพใหม่
  }

  //ฟังก์ชันตรวจสอบ _hasFetchedLocation
  Future<void> _checkNavigation() async {
  SharedPreferences prefs = await SharedPreferences.getInstance();
  bool hasFetchedLocation = prefs.getBool('hasFetchedLocation') ?? false;

  if (hasFetchedLocation) {
    final latitude = prefs.getString('rememberlatitude') ?? '';
    final longitude = prefs.getString('rememberlongitude') ?? '';

    WidgetsBinding.instance.addPostFrameCallback((_) {
      _showNotification2();
      Navigator.pushReplacement(
        context,
        MaterialPageRoute(
          builder: (context) => MapsPage(
            latitude: latitude,
            longitude: longitude,
          ),
        ),
      );
    });
  }
}


  // โหลดข้อมูลจาก SharedPreferences
  Future<void> _loadRememberedData() async {
    SharedPreferences prefs = await SharedPreferences.getInstance();
    setState(() {
      _rememberMe = prefs.getBool('rememberMe') ?? false;
      if (_rememberMe) {
        _userController.text = prefs.getString('rememberUser') ?? '';
        _passwordController.text = prefs.getString('rememberPassword') ?? '';
      }
    });
  }

  // บันทึกข้อมูลเมื่อผู้ใช้เลือก Remember Me และ เก็บข้อมูลเพื่อไปโชว์หน้าAccount Page
  Future<void> _saveRememberedData(String user, String password) async {
    SharedPreferences prefs = await SharedPreferences.getInstance();
    if (_rememberMe) {
      await prefs.setBool('rememberMe', true);
      await prefs.setString('rememberUser', user);
      await prefs.setString('rememberPassword', password);
    } else {
      await prefs.setBool('rememberMe', false);
      //await prefs.remove('savedUser');
      //await prefs.remove('savedPassword');
    }
    await prefs.setString('savedUser', user); //เก็บข้อมูล
    await prefs.setString('savedPassword', password); //เก็บข้อมูล
  }

  @override
  Widget build(BuildContext context) {
    return Scaffold(
        appBar: AppBar(
          backgroundColor: Theme.of(context).colorScheme.inversePrimary,
          title: Text(widget.title),
        ),
        body: Container(
          padding: EdgeInsets.all(10),
          child: SingleChildScrollView(
            child: Form(
              key: _formKey,
              child: Column(
                crossAxisAlignment: CrossAxisAlignment.start,
                children: <Widget>[
                  SizedBox(
                    height: 10,
                  ),
                  TextFormField(
                    controller: _userController,
                    decoration: InputDecoration(labelText: 'Username'),
                    validator: (input) {
                      if (input == null || input.isEmpty) {
                        return 'Please Enter Username';
                      }
                      return null;
                    },
                  ),
            
                  SizedBox(
                    height: 10,
                  ),
                  TextFormField(
                    controller: _passwordController,
                    decoration: InputDecoration(
                      labelText: 'Password',
                      suffixIcon: IconButton(
                        icon: Icon(
                          _obscurePassword
                              ? Icons.visibility
                              : Icons.visibility_off,
                        ),
                        onPressed: () {
                          setState(() {
                            _obscurePassword = !_obscurePassword;
                          });
                        },
                      ),
                    ),
                    obscureText: _obscurePassword, // ควบคุมการแสดง/ซ่อนรหัสผ่าน
                    validator: (input) {
                      if (input == null || input.isEmpty) {
                        return 'Please Enter Password';
                      }
                      return null;
                    },
                  ),
                  //Remember me & Login
                  Column(
                    crossAxisAlignment: CrossAxisAlignment.start,
                    children: <Widget>[
                      Row(
                        children: <Widget>[
                          Checkbox(
                            value: _rememberMe,
                            onChanged: (bool? value) {
                              setState(() {
                                _rememberMe = value ?? false;
                              });
                            },
                          ),
                          const Text('Remember Me'),
                        ],
                      ),
                      SizedBox(
                        height: 10,
                      ),
                      Row(children: <Widget>[
                        Expanded(
                          child: FloatingActionButton(
                            onPressed: () async {
                              bool pass = _formKey.currentState!.validate();
                              if (pass) {
                                bool isValid = await _userService.validateUser(
                                  _userController.text,
                                  _passwordController.text,
                                );
            
                                await _saveRememberedData(
                                  _userController.text,
                                  _passwordController.text,
                                ); // จำข้อมูลถ้าผู้ใช้เลือก Remember Me
            
                                if (isValid) {
                                  Navigator.pushReplacement(
                                    context,
                                    MaterialPageRoute(
                                      builder: (context) => const MyHomePage(),
                                    ),
                                  ); //ไปหน้าHomePage
                                  AccountPage(
                                    user: _userController.text,
                                  ); //ส่งค่าไปหน้าAccountPage
                                } else {
                                  ScaffoldMessenger.of(context).showSnackBar(
                                    const SnackBar(
                                        content:
                                            Text('Invalid username or password')),
                                  );
                                }
                              }
                            },
                            child: const Text('Login'),
                          ),
                        ),
                      ])
                    ],
                  ),
            
                  SizedBox(
                    height: 10,
                  ),
                  //Clear data
                  Row(
                    children: <Widget>[
                      Expanded(
                        child: OutlinedButton(
                          onPressed: () {
                            showDialog(
                              context: context,
                              builder: (BuildContext context) {
                                return AlertDialog(
                                  title: Text('Are you sure?'),
                                  content:
                                      Text('All entered data will be deleted.'),
                                  actions: <Widget>[
                                    TextButton(
                                      onPressed: () async {
                                        // ล้างข้อมูลในฟอร์ม
                                        _formKey.currentState!.reset();
            
                                        /*// ล้างข้อมูลใน SharedPreferences คือการลบข้อมูลทั้งหมด
                                        SharedPreferences prefs =
                                            await SharedPreferences.getInstance();
                                        await prefs.remove('user');
                                        await prefs.remove('password');*/
            
                                        //SetStateเพื่อให้หน้าจอclearข้อมูลด้วย
                                        setState(() {
                                          _userController.clear();
                                          _passwordController.clear();
                                        });
            
                                        Navigator.of(context)
                                            .pop(); // ปิดกล่องสนทนา
                                      },
                                      child: Text('Clear'),
                                    ),
                                    TextButton(
                                      onPressed: () {
                                        Navigator.of(context)
                                            .pop(); // ปิดกล่องสนทนา
                                      },
                                      child: Text('Cancel'),
                                    ),
                                  ],
                                );
                              },
                            );
                          },
                          child: Text('Clear'),
                        ),
                      ),
                    ],
                  ),
            
                  SizedBox(
                    height: 10,
                  ),
                  //Create account
                  Row(
                    children: <Widget>[
                      GestureDetector(
                        onTap: () {
                          Navigator.push(
                            context,
                            MaterialPageRoute(
                                builder: (context) => const CreateAccountPage(
                                    title: 'Create Account')),
                          );
                        },
                        child: Text(
                          'Create an account',
                          style: TextStyle(
                            color: Colors.blue, // เพิ่มสีให้ข้อความดูเป็นลิงก์
                            decoration:
                                TextDecoration.underline, // เพิ่มขีดเส้นใต้
                          ),
                        ),
                      ),
                    ],
                  ),
            
                  SizedBox(
                    height: 10,
                  ),
                  //Forgot Password
                  Row(
                    children: <Widget>[
                      GestureDetector(
                        onTap: () {
                          Navigator.push(
                            context,
                            MaterialPageRoute(
                              builder: (context) => ForgotPasswordPage(
                                user: _userController.text,
                              ),
                            ),
                          );
                        },
                        child: Text(
                          'Forgot Password??',
                          style: TextStyle(
                            color: Colors.red, // เพิ่มสีให้ข้อความดูเป็นลิงก์
                          ),
                        ),
                      ),
                    ],
                  ),
                ],
              ),
            ),
          ),
        ));
  }
}



/*class LoginPage extends StatefulWidget {
  const LoginPage({super.key, required this.title});

  final String title;

  @override
  State<LoginPage> createState() => _LoginState();
}

class _LoginState extends State<LoginPage> {
  final _formKey = GlobalKey<FormState>();

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(
        backgroundColor: Theme.of(context).colorScheme.inversePrimary,
        title: Text(widget.title),
      ),
      body: Container(
        padding: EdgeInsets.all(10),
        child: Form(
          key: _formKey,
          child: Column(
            crossAxisAlignment: CrossAxisAlignment.start,
            children: <Widget>[
              SizedBox(
                height: 15,
              ),
              Text('user:'),
              TextFormField(
                validator: (input) {
                  if (input == null || input.isEmpty) {
                    return "Please Enter user";
                  }

                  return null;
                },
              ),
              SizedBox(
                height: 15,
              ),
              Text('Password:'),
              TextFormField(
                validator: (input) {
                  if (input == null || input.isEmpty) {
                    return "Please Enter Password";
                  }

                  return null;
                },
              ),
              SizedBox(
                height: 15,
              ),
              Row(
                children: <Widget>[
                  Expanded(
                    child: FloatingActionButton(
                      onPressed: () {
                        bool pass = _formKey.currentState!.validate();
                        if (pass) {
                          Navigator.push(
                            context,
                            MaterialPageRoute(
                                builder: (context) =>
                                    const MyHomePage(title: 'Home Page')),
                          );
                        }
                      },
                      child: const Text('Login'),
                    ),
                  ),
                ],
              ),
              Row(
                children: <Widget>[
                  Expanded(
                    child: OutlinedButton(
                      onPressed: () {
                        showDialog(
                          context: context,
                          builder: (BuildContext context) {
                            return AlertDialog(
                              title: Text('Are you sure?'),
                              content: Text('All entered data will be deleted.'),
                              actions: <Widget>[
                                TextButton(
                                  onPressed: () {
                                    _formKey.currentState!
                                        .reset(); // Clears the form after dialog is shown
                                    Navigator.of(context)
                                        .pop(); // Closes the dialog
                                  },
                                  child: Text('Clear'),
                                ),
                                TextButton(
                                  onPressed: () {
                                    Navigator.of(context)
                                        .pop(); // Closes the dialog
                                  },
                                  child: Text('Cancel'),
                                ),
                              ],
                            );
                          },
                        );
                      },
                      child: Text('Clear Data'),
                    ),
                  ),
                ],
              ),
            ],
          ),
        ),
      ),
    );
  }
}
*/